import json

from dependency_injector.wiring import inject, Provide

from src.application import dtos

from src import plugin, BaseRepository, Container
from src import shared_vars


async def handle_task(msg: str):
    msg = json.loads(msg)
    task_id = msg.get("id", "0")

    if not msg.get("status"):
        r = await shared_vars.base_repository.update_search_task(task_id, dtos.UpdateSearchTaskDto(summary=None,
                                                                                                   short_summary=None,
                                                                                                   status=1 if msg.get(
                                                                                                       "status") else -1))

        await plugin.bot.send_message(chat_id=r.value, text="<b>‚ùå –ó–∞–¥–∞—á–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—à –∞–≥–µ–Ω—Ç –≤–∞—Å –Ω–µ–¥–æ–ø–æ–Ω—è–ª :3</i>")
        return



    payload = msg.get("payload", {})

    short_summary = payload.get("shortSummary", None)
    summary = payload.get("summary", None)

    r = await shared_vars.base_repository.update_search_task(task_id, dtos.UpdateSearchTaskDto(summary=summary, short_summary=short_summary, status=1 if msg.get("status") else -1))


    await plugin.bot.send_message(chat_id=r.value, text=f'<b>üìî –ó–∞–¥–∞—á–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n{short_summary}\n\n<i><a href="s4d.zzvt.pw/{task_id}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a></i>')

